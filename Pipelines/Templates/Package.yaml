# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

jobs:
- job: Unity_Packaging
  workspace:
    clean: all
  continueOnError: false
  displayName: Generate Unity and NPM Packages
  pool:
    name: Analog-Unity
    demands: Unity2020LTS
  variables:
    unityLocation: ''
  steps:
  - script: echo Downloading Pipeline Artifacts
  - checkout: self
    submodules: true
  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: 'BuildArtifacts'
      buildType: 'current'
      targetPath: '$(Pipeline.Workspace)'
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script:
        $info = "$env:Unity2020LTS" + "\Editor";
        Write-Output "##vso[task.setvariable variable=unityLocation;]$info"
  - script: python tools\unity_package.py -u "$(unityLocation)" -s $(Pipeline.Workspace) -o "$(Pipeline.Workspace)\unity" -v $(PackageVersion)
    displayName: Building Unity Package
  - task: UniversalPackages@0
    displayName: Universal Publish Unity Package
    inputs:
      command: publish
      publishDirectory: '$(Pipeline.Workspace)\unity'
      vstsFeedPublish: $(PackageFeed)
      vstsFeedPackagePublish: 'Microsoft.SpatialAudio.Spatializer.Unity'
      packagePublishDescription: 'Unity Spatializer Plugin with Windows Sonic Support'
      versionOption: custom
      versionPublish: $(PackageVersion)
  - task: NodeTool@0
    displayName: 'Install NPM Tools'
  - task: CmdLine@2
    displayName: Copy .npmrc for Internal Feed
    inputs:
      script: copy $(Build.SourcesDirectory)\Tools\InternalFeed.npmrc $(Build.SourcesDirectory)\Source\Plugins\CrossPlatformPluginGenerator\Assets\Microsoft.SpatialAudio.Spatializer.Unity\.npmrc
  - task: npmAuthenticate@0
    displayName: Internal NPM Feed Authentication
    inputs:
      workingFile: Source\Plugins\CrossPlatformPluginGenerator\Assets\Microsoft.SpatialAudio.Spatializer.Unity\.npmrc
  - script: python tools\upm_package.py -s $(Pipeline.Workspace) -o "$(Pipeline.Workspace)\npm" -v $(PackageVersion) -p
    displayName: Publish NPM Package to Internal Feed
    condition: and(succeeded(), or (eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['PublishInternal'], 'True')))
